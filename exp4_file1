rm(list=ls())

DIR<-"//clentb.eis.equifax.com/desarrollo modelos/Paraguay/Testing_Gen_Comercios/Clientes/Personal/TDH PERSONAL"
setwd(DIR)

V1<-read.csv(file="Libro5_disociado.csv", header=TRUE , sep=",", dec=".", fill=TRUE)
dim(V1) # 15000   6 
 names(V1)
# [1] "ID"                 "LINEA     

V2<-read.csv(file="personal_tdh_inf.csv", header=TRUE , sep=",", dec=".", fill=TRUE)
dim(V2) # 14389 170
 names(V2)
# [1] "id"                 "LINEA     

V3<-read.csv(file="personal_tdh_dem.csv", header=TRUE , sep=",", dec=".", fill=TRUE)
dim(V3) # 14389 170
names(V3)

datos<-merge(merge(V1,V2,by.x="ID",by.y="inf_id"),V3,by.x="ID",by.y="id")
dim(datos) # 14389   175 
names(datos)
for(i in 1:dim(datos)[2]) # para ver quÃ© clase le adjudicÃ³ el r a cada variable
{a <- c(class(datos[,i]),names(datos)[i],i)
  print.table(a)}

#fechas
	fechas<-c(6,9)
	for (i in fechas){
	datos[,i]<- as.Date(datos[,i],format="%d/%m/%Y")
	}	
	#cuantitativas
	# cuan<-c(7)
	# for (i in cuan){
	# datos[,i]<- as.integer(as.character(datos[,i]))
	# }

#cualitativas
	# cual<-c(8,9,58:92,137,138,141,147)
	# for (i in cual){
	# datos[,i]<- as.factor(datos[,i])
	# }

summary(datos$inf_fecha_solicitud)
datos<-datos[datos$inf_fecha_solicitud<"2015-03-01",]
datos<-datos[datos$ESTADO=="ACTIV"|datos$ESTADO=="NIVM3",]
datos$target<-ifelse(datos$ESTADO=="NIVM3",1,0)
100*prop.table(table(datos$target))

library(Hmisc)

datos$edad_jov 	<- ifelse(datos$edad<24,datos$edad_jov<-1,datos$edad_jov<-0)
datos$edad_jub 	<- ifelse(datos$edad>65,datos$edad_jub<-1,datos$edad_jub<-0)

# VALIDA MODELO DE TELCOS DIRTY

datos$regreDIRTY<-0.9857-0.2399*datos$inf_cons_cant_comercio_u3m-0.0329*datos$inf_cons_cant_otros_u24m-1.2655*datos$inf_dem_cant_u02m+0.0164*datos$inf_cons_cant_sf_u24m-0.1105*datos$inf_3_o_mas_sol_telco_u6m-0.2055*datos$edad_jov-0.2101*datos$inf_cons_cant_telco_u12m-1.6475*datos$inf_dem_cant_u12m-0.1777*datos$inf_cons_cant_ccredito_u24m+0.0206*datos$edad-0.4716*datos$inf_2_o_mas_sol_telco_u6m-0.0222*datos$inf_mor_max_dias_atraso
		
datos$scoreDIRTY<-round((((exp(datos$regreDIRTY))/(1+exp((datos$regreDIRTY))))*999)+1)

source("//clentb.eis.equifax.com/desarrollo modelos/Paraguay/Archivos R scoring/tbl_performance.r")
report_cont(datos$scoreDIRTY,datos$target)

datos$nodos6<-ifelse((datos$inf_cons_cant_total_sf<5 & datos$inf_2_o_mas_sol_telco_u6m>0) ,6,0)
datos$nodos5<-ifelse((datos$inf_cons_cant_total_sf<5 & datos$inf_2_o_mas_sol_telco_u6m<1 & datos$inf_cons_cant_total_sf<1) ,5,0)
datos$nodos3<-ifelse((datos$inf_cons_cant_total_sf<5 & datos$inf_2_o_mas_sol_telco_u6m<1 & datos$inf_cons_cant_total_sf>0) ,3,0)
datos$nodos4<-ifelse((datos$inf_cons_cant_total_sf>4 & datos$scoreDIRTY<630 & datos$inf_cons_cant_telco_u6m>1) ,4,0)
datos$nodos2<-ifelse((datos$inf_cons_cant_total_sf>4 & datos$scoreDIRTY<630 & datos$inf_cons_cant_telco_u6m<2) ,2,0)
datos$nodos1<-ifelse((datos$inf_cons_cant_total_sf>4 & datos$scoreDIRTY>629) ,1,0)
datos$nodos<-datos$nodos1+datos$nodos2+datos$nodos3+datos$nodos4+datos$nodos5+datos$nodos6
table(datos$nodos)

source("//clentb.eis.equifax.com/desarrollo modelos/Paraguay/Archivos R scoring/tbl_performance.r")
report_cat(datos$nodos,datos$target)
   # Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV   K-S
# 1  2685  46.96      46.96      100.00  2381  49.91      49.91      100.00  304  32.10     32.10     100.00        11.32           11.32          7.83  44.12 0.08 17.80
# 2   392   6.86      53.81       53.04   315   6.60      56.51       50.09   77   8.13     40.23      67.90        19.64           12.38          4.09 -20.82 0.00 16.28
# 3  1329  23.24      77.05       46.19  1090  22.85      79.35       43.49  239  25.24     65.47      59.77        17.98           14.07          4.56  -9.95 0.00 13.88
# 4   261   4.56      81.62       22.95   203   4.25      83.61       20.65   58   6.12     71.59      34.53        22.22           14.53          3.50 -36.42 0.01 12.01
# 5   744  13.01      94.63       18.38   559  11.72      95.33       16.39  185  19.54     91.13      28.41        24.87           15.95          3.02 -51.12 0.04  4.20
# 6   307   5.37     100.00        5.37   223   4.67     100.00        4.67   84   8.87    100.00       8.87        27.36           16.56          2.65 -64.07 0.03  0.00
   # 5718 100.00         NA          NA  4771 100.00         NA          NA  947 100.00        NA         NA        16.56              NA          5.04     NA 0.16 17.80

   
   
   
   
   
   
   
   
   
   
   
#### Horrible, hagamos otro modelo
datos<-merge(merge(V1,V2,by.x="ID",by.y="inf_id"),V3,by.x="ID",by.y="id")
datos<-datos[datos$ESTADO=="ACTIV"|datos$ESTADO=="NIVM3",]
datos$target<-ifelse(datos$ESTADO=="NIVM3",1,0)
100*prop.table(table(datos$target))
# datos$clean<-ifelse((datos$inf_dem_cant_abiertas==0 & datos$inf_conv_cant_abiertas==0 & datos$inf_inhib_cant_abiertas==0 & datos$inf_qui_cant_abiertas==0 & datos$inf_rem_cant_abiertas==0 & datos$inf_inc_cant_abiertas==0 & datos$inf_mor_cant_abiertas==0),datos$clean<-1,datos$clean<-0)
# table(datos$clean)
    # 0     1 
 # 1733 12595 

library(Hmisc)
library(rms)
library(MASS)
library(rpart)
source("//clentb.eis.equifax.com/desarrollo modelos/Paraguay/Archivos R scoring/tbl_performance.r") 
source("//clentb.eis.equifax.com/desarrollo modelos/Paraguay/Archivos R scoring/iv_gain.r") 

# set.seed(dim(datos)[1])
# datos$rand <- runif(dim(datos)[1])    
    # dim(datos)[1] es el nÃÂºmero de observaciones para generar la variable uniforme
    # if length(n) > 1, the length is taken to be the number required.
    # 10636 219

fechas<-c(6,9)
	for (i in fechas){
	datos[,i]<- as.Date(datos[,i],format="%d/%m/%Y")
	}
datos<-datos[datos$inf_fecha_solicitud<"2015-03-01",]	
	
	
########################
## AnÃÂ¡lisis bivariado ##
########################

datos_num <- NULL
for(i in 1:dim(datos)[2]) {if(is.numeric(datos[,i]) | is.integer(datos[,i])) datos_num[i] <- min(datos[,i],na.rm=T)!=max(datos[,i],na.rm=T); NULL}
datos_num[is.na(datos_num)] <- TRUE

datos <- datos[,datos_num]

dim(datos) 

var_ratios<-iv_gain(datos,exclude=c(1:10,109:113,127:133),pos=134)
var_ratios<-var_ratios[!(row.names(var_ratios) %in% c("rand.1","rand.2","rand.3")),]
var_ratios

datos_bi <- datos[,c("target", rownames(var_ratios[var_ratios[,1]>0.02,]))]
# datos_bi<-datos[,-c(1:10,105:116,131:142,159:175,181)]
dim(datos_bi)  # 10271   21
#datos_bi$edad<-NULL
datos_bi$inf_mor_sal_abier_gs<-NULL
datos_bi$inf_mor_max_dias_atraso<-NULL
p <- seq(0.5,0.95,0.05)

arbol.0 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10)
arbol.1 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[1],p[1])))
arbol.2 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[2],p[2])))
arbol.3 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[3],p[3])))
arbol.4 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[4],p[4])))
arbol.5 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[5],p[5])))
arbol.6 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[6],p[6])))
arbol.7 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[7],p[7])))
arbol.8 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[8],p[8])))
arbol.9 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[9],p[9])))
arbol.10 = rpart(target ~., datos_bi, method="class", minbucket=100, cp=0.007,xval=10,parms=list(prior=c(1-p[10],p[10])))

# # plotcp(arbol.0); printcp(arbol.0)                   
# # arbol.0.pr <- prune(arbol.0,cp=0.0046)         
# # plot(arbol.0.pr, uniform=T, compress=.1, margin=.1); text(arbol.0.pr, use.n=T,  cex = .8, pretty=T)          
# # summary(arbol.0.pr)       
# # print(arbol.0.pr)
#datos_bi$pred.arbol0<-NULL

plotcp(arbol.0); printcp(arbol.0) #no sirve

plotcp(arbol.1); printcp(arbol.1)   # 2 nodos.                
arbol.1.pr <- prune(arbol.1,cp=0.0074)         
plot(arbol.1.pr, uniform=T, compress=.1, margin=.1); text(arbol.1.pr, use.n=T,  cex = .8, pretty=T)        
summary(arbol.1.pr)       
print(arbol.1.pr)
report_cat(predict(arbol.1.pr,datos_bi,type='prob')[,2],datos_bi$target)
                  # Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV   K-S
# 0.343351628566932  3000  29.21      29.21      100.00  2706  31.82      31.82      100.00  294  16.64     16.64     100.00         9.80            9.80          9.20  64.84 0.10 15.18
# 0.446493739927339  2675  26.04      55.25       70.79  2291  26.94      58.76       68.18  384  21.73     38.37      83.36        14.36           11.95          5.97  21.48 0.01 20.39
# 0.55362933451312    693   6.75      62.00       44.75   551   6.48      65.24       41.24  142   8.04     46.41      61.63        20.49           12.88          3.88 -21.53 0.00 18.83
# 0.597691136553969   602   5.86      67.86       38.00   460   5.41      70.65       34.76  142   8.04     54.44      53.59        23.59           13.80          3.24 -39.59 0.01 16.21
# 0.608175866850412  3301  32.14     100.00       32.14  2496  29.35     100.00       29.35  805  45.56    100.00      45.56        24.39           17.20          3.10 -43.97 0.07  0.00
                  # 10271 100.00         NA          NA  8504 100.00         NA          NA 1767 100.00        NA         NA        17.20              NA          4.81     NA 0.19 20.39
 

plotcp(arbol.2); printcp(arbol.2)     #2 nodos.
arbol.2.pr <- prune(arbol.2,cp= 0.0094)            
plot(arbol.2.pr, uniform=T, compress=.1, margin=.1); text(arbol.2.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.2.pr)     
print(arbol.2.pr)
report_cat(predict(arbol.2.pr,datos_bi,type='prob')[,2],datos_bi$target)
                 # Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV   K-S
# 0.389902303598982  3000  29.21      29.21      100.00  2706  31.82      31.82      100.00  294  16.64     16.64     100.00         9.80            9.80          9.20  64.84 0.10 15.18
# 0.414151634922737   988   9.62      38.83       70.79   882  10.37      42.19       68.18  106   6.00     22.64      83.36        10.73           10.03          8.32  54.75 0.02 19.55
# 0.472760382089687   756   7.36      46.19       61.17   656   7.71      49.91       57.81  100   5.66     28.30      77.36        13.23           10.54          6.56  30.97 0.01 21.61
# 0.571870273345607   589   5.73      51.92       53.81   480   5.64      55.55       50.09  109   6.17     34.47      71.70        18.51           11.42          4.40  -8.88 0.00 21.09
# 0.59786060741632    342   3.33      55.25       48.08   273   3.21      58.76       44.45   69   3.90     38.37      65.53        20.18           11.95          3.96 -19.59 0.00 20.39
# 0.602529615503651   693   6.75      62.00       44.75   551   6.48      65.24       41.24  142   8.04     46.41      61.63        20.49           12.88          3.88 -21.53 0.00 18.83
# 0.644860813059977   602   5.86      67.86       38.00   460   5.41      70.65       34.76  142   8.04     54.44      53.59        23.59           13.80          3.24 -39.59 0.01 16.21
# 0.654826175696981  3301  32.14     100.00       32.14  2496  29.35     100.00       29.35  805  45.56    100.00      45.56        24.39           17.20          3.10 -43.97 0.07  0.00
                  # 10271 100.00         NA          NA  8504 100.00         NA          NA 1767 100.00        NA         NA        17.20              NA          4.81     NA 0.22 21.61
 

plotcp(arbol.3); printcp(arbol.3)   #3 nodos                
arbol.3.pr <- prune(arbol.3,cp= 0.01)             #####
plot(arbol.3.pr, uniform=T, compress=.1, margin=.1); text(arbol.3.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.3.pr)       
print(arbol.3.pr)
report_cat(predict(arbol.3.pr,datos_bi,type='prob')[,2],datos_bi$target)

plotcp(arbol.4); printcp(arbol.4) # nodos.
arbol.4.pr <- prune(arbol.4,cp= 0.012)              #####
plot(arbol.4.pr, uniform=T, compress=.1, margin=.1); text(arbol.4.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.4.pr)       
print(arbol.4.pr)

plotcp(arbol.5); printcp(arbol.5)   # nodos.              
arbol.5.pr <- prune(arbol.5,cp=0.0362)              #####
plot(arbol.5.pr, uniform=T, compress=.1, margin=.1); text(arbol.5.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.5.pr)       
print(arbol.5.pr)

plotcp(arbol.6); printcp(arbol.6) # nodos.
arbol.6.pr <- prune(arbol.6,cp=0.0211)              
plot(arbol.6.pr, uniform=T, compress=.1, margin=.1); text(arbol.6.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.6.pr)       
print(arbol.6.pr)

plotcp(arbol.7); printcp(arbol.7)   #  nodos.                
arbol.7.pr <- prune(arbol.7,cp=0.015)              
plot(arbol.7.pr, uniform=T, compress=.1, margin=.1); text(arbol.7.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.7.pr)       
print(arbol.7.pr)

plotcp(arbol.8); printcp(arbol.8)  # nodos.                
arbol.8.pr <- prune(arbol.8,cp=0.0197)            
plot(arbol.8.pr, uniform=T, compress=.1, margin=.1); text(arbol.8.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.8.pr)       
print(arbol.8.pr)

###########################  Todo lo anterior no funciona. Probemos otros genericos  #######


datos<-merge(merge(V1,V2,by.x="ID",by.y="inf_id"),V3,by.x="ID",by.y="id")
datos<-datos[datos$ESTADO=="ACTIV"|datos$ESTADO=="NIVM3",]
datos$target<-ifelse(datos$ESTADO=="NIVM3",1,0)
dim(datos) # 14389   175 
names(datos)
for(i in 1:dim(datos)[2]) # para ver quÃ© clase le adjudicÃ³ el r a cada variable
{a <- c(class(datos[,i]),names(datos)[i],i)
  print.table(a)}

	#fechas
	fechas<-c(6,9)
	for (i in fechas){
	datos[,i]<- as.Date(datos[,i],format="%d/%m/%Y")
	}	
 
 datos<-datos[datos$inf_fecha_solicitud<"2015-03-01",]	
 

datos$edad_jov <- ifelse(datos$edad<24,datos$edad_jov<-1,datos$edad_jov<-0)
table(datos$edad_jov)

datos$edad_jub <- ifelse(datos$edad>65,datos$edad_jub<-1,datos$edad_jub<-0)
table(datos$edad_jub)



###########################################################
#################### REGRESIÃN DIRTY COMECIOS ######################
###########################################################
datos$regreDIRTY<-1.1153-0.4217*datos$inf_2_o_mas_sol_ccredito_u6m+0.0223*datos$edad-0.1470*datos$inf_3_o_mas_sol_comercio_u6m-0.0297*datos$inf_cons_cant_comercio_u3m-0.4310*datos$inf_3_o_mas_sol_sf_u6m-0.1528*datos$inf_1_o_mas_sol_telco_u6m-0.2147*datos$inf_1_o_mas_sol_otros_u6m+0.1295*datos$edad_jub-0.1490*datos$inf_cons_cant_ccredito_u24m-0.0253*datos$inf_cons_cant_comercio_u24m-0.1951*datos$inf_cons_cant_telco_u12m-0.2138*datos$inf_2_o_mas_sol_comercio_u6m-0.0219*datos$inf_mor_max_dias_atraso-0.0007*datos$inf_cons_cant_sf_u24m

datos$scoreDIRTY<-round((((exp(datos$regreDIRTY-1))/(1+exp((datos$regreDIRTY-1))))*999)+1) 

report_cont(datos$scoreDIRTY,datos$target)
          # Score Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV   K-S
# <NA>          NA     1   0.01       0.01      100.00     1   0.01       0.01      100.00    0   0.00      0.00     100.00         0.00            0.00           Inf    Inf  Inf  0.01
# [729,897] 775.03  1015   9.88       9.89       99.99   911  10.71      10.72       99.99  104   5.89      5.89     100.00        10.25           10.24          8.76  59.89 0.03  4.84
# [684,729) 704.48  1026   9.99      19.88       90.11   899  10.57      21.30       89.28  127   7.19     13.07      94.11        12.38           11.31          7.08  38.58 0.01  8.22
# [651,684) 666.95  1015   9.88      29.76       80.12   874  10.28      31.57       78.70  141   7.98     21.05      86.93        13.89           12.17          6.20  25.31 0.01 10.52
# [616,651) 632.50  1040  10.13      39.89       70.24   883  10.38      41.96       68.43  157   8.89     29.94      78.95        15.10           12.91          5.62  15.58 0.00 12.02
# [583,616) 598.91  1018   9.91      49.80       60.11   851  10.01      51.96       58.04  167   9.45     39.39      70.06        16.40           13.61          5.10   5.72 0.00 12.57
# [553,583) 566.87  1042  10.15      59.95       50.20   848   9.97      61.94       48.04  194  10.98     50.37      60.61        18.62           14.46          4.37  -9.62 0.00 11.57
# [510,553) 533.09  1026   9.99      69.93       40.05   816   9.60      71.53       38.06  210  11.88     62.25      49.63        20.47           15.31          3.89 -21.39 0.00  9.28
# [438,510) 478.21  1034  10.07      80.00       30.07   845   9.94      81.47       28.47  189  10.70     72.95      37.75        18.28           15.69          4.47  -7.37 0.00  8.52
# [181,438) 350.79  1027  10.00      90.00       20.00   801   9.42      90.89       18.53  226  12.79     85.74      27.05        22.01           16.39          3.54 -30.59 0.01  5.15
# [  1,181)  24.50  1027  10.00     100.00       10.00   775   9.11     100.00        9.11  252  14.26    100.00      14.26        24.54           17.20          3.08 -44.78 0.02  0.00
              # NA 10271 100.00         NA          NA  8504 100.00         NA          NA 1767 100.00        NA         NA           NA              NA          4.81     NA  Inf 12.57
 
###########################################################
#################### REGRESIÃN DIRTY COOPERATIVAS##########
###########################################################
datos$edad[is.na(datos$edad)==TRUE]<-18

datos$regreDIRTY<-2.9458-0.0209*datos$inf_mor_max_dias_atraso-0.9188*datos$inf_1_o_mas_sol_ccredito_u6m-0.7998*datos$inf_2_o_mas_sol_sf_u6m-0.181*datos$inf_cons_cant_telco_u3m-0.3713*datos$inf_2_o_mas_sol_telco_u6m-0.0379*datos$inf_cons_cant_sf_u24m-0.1982*datos$inf_cons_cant_comercio_u12m-0.1715*datos$inf_cons_cant_telco_u24m-0.1002*datos$inf_es_trab_autonomo+0.3869*datos$edad_jub+0.0246*datos$edad
datos$scoreDIRTY<-round((((exp(datos$regreDIRTY-1.5))/(1+exp((datos$regreDIRTY-1.5))))*999)+1)
min(datos$scoreDIRTY)
max(datos$scoreDIRTY)
report_cont(datos$scoreDIRTY,datos$target, g=10)
          # Score Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV  K-S
# [900,980] 925.65  1021   9.94       9.94      100.00   896  10.54      10.54      100.00  125   7.07      7.07     100.00        12.24           12.24          7.17  39.84 0.01 3.46
# [869,900) 883.53  1029  10.02      19.96       90.06   866  10.18      20.72       89.46  163   9.22     16.30      92.93        15.84           14.05          5.31   9.89 0.00 4.42
# [839,869) 853.85  1026   9.99      29.95       80.04   854  10.04      30.76       79.28  172   9.73     26.03      83.70        16.76           14.95          4.97   3.12 0.00 4.73
# [809,839) 825.28  1006   9.79      39.74       70.05   781   9.18      39.95       69.24  225  12.73     38.77      73.97        22.37           16.78          3.47 -32.68 0.01 1.18
# [758,809) 785.39  1045  10.17      49.92       60.26   861  10.12      50.07       60.05  184  10.41     49.18      61.23        17.61           16.95          4.68  -2.81 0.00 0.89
# [697,758) 727.01  1025   9.98      59.90       50.08   887  10.43      60.50       49.93  138   7.81     56.99      50.82        13.46           16.37          6.43  28.93 0.01 3.51
# [619,697) 659.77  1036  10.09      69.98       40.10   884  10.40      70.90       39.50  152   8.60     65.59      43.01        14.67           16.12          5.82  18.93 0.00 5.30
# [478,619) 556.38  1023   9.96      79.94       30.02   857  10.08      80.97       29.10  166   9.39     74.99      34.41        16.23           16.14          5.16   7.02 0.00 5.99
# [167,478) 344.87  1031  10.04      89.98       20.06   843   9.91      90.89       19.03  188  10.64     85.63      25.01        18.23           16.37          4.48  -7.07 0.00 5.26
# [  1,167)  27.77  1029  10.02     100.00       10.02   775   9.11     100.00        9.11  254  14.37    100.00      14.37        24.68           17.20          3.05 -45.57 0.02 0.00
          # 658.48 10271 100.00         NA          NA  8504 100.00         NA          NA 1767 100.00        NA         NA           NA              NA          4.81     NA 0.06 5.99
 
###########################################################
#################### ARBOL DE TIGO ##########
###########################################################
 
datos$edad[is.na(datos$edad)==TRUE]<-18
datos$edad_jov <- ifelse(datos$edad<24,datos$edad_jov<-1,datos$edad_jov<-0)
datos$edad_jub <- ifelse(datos$edad>65,datos$edad_jub<-1,datos$edad_jub<-0)
datos$regreDIRTY<-0.9857-0.2399*datos$inf_cons_cant_comercio_u3m-0.0329*datos$inf_cons_cant_otros_u24m-1.2655*datos$inf_dem_cant_u02m+0.0164*datos$inf_cons_cant_sf_u24m-0.1105*datos$inf_3_o_mas_sol_telco_u6m-0.2055*datos$edad_jov-0.2101*datos$inf_cons_cant_telco_u12m-1.6475*datos$inf_dem_cant_u12m-0.1777*datos$inf_cons_cant_ccredito_u24m+0.0206*datos$edad-0.4716*datos$inf_2_o_mas_sol_telco_u6m-0.0222*datos$inf_mor_max_dias_atraso
		
datos$scoreDIRTY<-round((((exp(datos$regreDIRTY))/(1+exp((datos$regreDIRTY))))*999)+1)
 
datos$nodos8<-ifelse((datos$scoreDIRTY>732 & datos$inf_cons_cant_total>7 & datos$scoreDIRTY>828) ,1,0)
datos$nodos7<-ifelse((datos$scoreDIRTY>732 & datos$inf_cons_cant_total>7 & datos$scoreDIRTY<829 & datos$inf_cons_cant_total_sf>8) ,3,0)
datos$nodos6<-ifelse((datos$scoreDIRTY>732 & datos$inf_cons_cant_total>7 & datos$scoreDIRTY<829 & datos$inf_cons_cant_total_sf<9) ,4,0)
datos$nodos5<-ifelse((datos$scoreDIRTY>732 & datos$inf_cons_cant_total<8) ,6,0)
datos$nodos4<-ifelse((datos$scoreDIRTY<733 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_total_sf>5 &datos$scoreDIRTY>660) ,2,0)
datos$nodos3<-ifelse((datos$scoreDIRTY<733 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_total_sf>5 &datos$scoreDIRTY<661) ,5,0)
datos$nodos2<-ifelse((datos$scoreDIRTY<733 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_total_sf<6) ,7,0)
datos$nodos1<-ifelse((datos$scoreDIRTY<733 & datos$inf_mor_cant_abiertas>0) ,8,0)
datos$nodos<-datos$nodos1+datos$nodos2+datos$nodos3+datos$nodos4+datos$nodos5+datos$nodos6+datos$nodos7+datos$nodos8
table(datos$nodos)

report_cat(datos$nodos,datos$target)
  # Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV   K-S
# 1  2203  21.45      21.45      100.00  1986  23.35      23.35      100.00  217  12.28     12.28     100.00         9.85            9.85          9.15  64.27 0.07 11.07
# 2   502   4.89      26.34       78.55   430   5.06      28.41       76.65   72   4.07     16.36      87.72        14.34           10.68          5.97  21.59 0.00 12.05
# 3  1028  10.01      36.35       73.66   924  10.87      39.28       71.59  104   5.89     22.24      83.64        10.12           10.53          8.88  61.31 0.03 17.03
# 4  1106  10.77      47.11       63.65   914  10.75      50.02       60.72  192  10.87     33.11      77.76        17.36           12.09          4.76  -1.09 0.00 16.92
# 5   642   6.25      53.36       52.89   514   6.04      56.07       49.98  128   7.24     40.35      66.89        19.94           13.01          4.02 -18.11 0.00 15.72
# 6  2682  26.11      79.48       46.64  2194  25.80      81.87       43.93  488  27.62     67.97      59.65        18.20           14.71          4.50  -6.81 0.00 13.90
# 7  1205  11.73      91.21       20.52   872  10.25      92.12       18.13  333  18.85     86.81      32.03        27.63           16.37          2.62 -60.86 0.05  5.31
# 8   903   8.79     100.00        8.79   670   7.88     100.00        7.88  233  13.19    100.00      13.19        25.80           17.20          2.88 -51.50 0.03  0.00
  # 10271 100.00         NA          NA  8504 100.00         NA          NA 1767 100.00        NA         NA        17.20              NA          4.81     NA 0.19 17.03
 
 
 
 
 
 
 
 
 
############### EMPECEMOS DE NUEVO  ####################################

datos<-merge(merge(V1,V2,by.x="ID",by.y="inf_id"),V3,by.x="ID",by.y="id")
datos<-datos[datos$ESTADO=="ACTIV"|datos$ESTADO=="NIVM3",]
datos$target<-ifelse(datos$ESTADO=="NIVM3",1,0)
dim(datos) # 14389   175 
names(datos)
for(i in 1:dim(datos)[2]) # para ver quÃ© clase le adjudicÃ³ el r a cada variable
{a <- c(class(datos[,i]),names(datos)[i],i)
  print.table(a)}

	#fechas
	fechas<-c(6,9)
	for (i in fechas){
	datos[,i]<- as.Date(datos[,i],format="%d/%m/%Y")
	}	
 
 datos<-datos[datos$inf_fecha_solicitud<"2015-03-01",]	
 
datos$edad[is.na(datos$edad)==TRUE]<-18
datos$edad_jov <- ifelse(datos$edad<24,datos$edad_jov<-1,datos$edad_jov<-0)
datos$edad_jub <- ifelse(datos$edad>65,datos$edad_jub<-1,datos$edad_jub<-0)
datos$edad_normal <- ifelse(datos$edad>23 & datos$edad<66,1,0)


datos_num <- NULL
for(i in 1:dim(datos)[2]) {if(is.numeric(datos[,i]) | is.integer(datos[,i])) datos_num[i] <- min(datos[,i],na.rm=T)!=max(datos[,i],na.rm=T); NULL}
datos_num[is.na(datos_num)] <- TRUE

datos <- datos[,datos_num]

dim(datos) #10271  137 

var_ratios<-iv_gain(datos,exclude=c(1:11,109:113,127:133),pos=134)
var_ratios<-var_ratios[!(row.names(var_ratios) %in% c("rand.1","rand.2","rand.3")),]
var_ratios

datos_bi <- datos[,c("target", rownames(var_ratios[var_ratios[,1]>0.02,]))]
# datos_bi<-datos[,-c(1:10,105:116,131:142,159:175,181)]
dim(datos_bi)  # 10271   22
# datos_bi$inf_cons_cant_total_sf<-NULL
datos_bi$inf_mor_sal_abier_gs<-NULL
datos_bi$inf_mor_max_dias_atraso<-NULL
p <- seq(0.5,0.95,0.05)

arbol.0 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10)
arbol.1 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[1],p[1])))
arbol.2 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[2],p[2])))
arbol.3 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[3],p[3])))
arbol.4 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[4],p[4])))
arbol.5 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[5],p[5])))
arbol.6 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[6],p[6])))
arbol.7 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[7],p[7])))
arbol.8 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[8],p[8])))
arbol.9 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[9],p[9])))
arbol.10 = rpart(target ~., datos_bi, method="class", minbucket=200, cp=0.0007,xval=10,parms=list(prior=c(1-p[10],p[10])))

# # plotcp(arbol.0); printcp(arbol.0)                   
# # arbol.0.pr <- prune(arbol.0,cp=0.0046)         
# # plot(arbol.0.pr, uniform=T, compress=.1, margin=.1); text(arbol.0.pr, use.n=T,  cex = .8, pretty=T)          
# # summary(arbol.0.pr)       
# # print(arbol.0.pr)
#datos_bi$pred.arbol0<-NULL

plotcp(arbol.0); printcp(arbol.0) #no sirve

plotcp(arbol.1); printcp(arbol.1)   # 2 nodos.                
arbol.1.pr <- prune(arbol.1,cp=0.0035)         
plot(arbol.1.pr, uniform=T, compress=.1, margin=.1); text(arbol.1.pr, use.n=T,  cex = .8, pretty=T)        
summary(arbol.1.pr)       
print(arbol.1.pr)
report_cat(predict(arbol.1.pr,datos_bi,type='prob')[,2],datos_bi$target)
                  # Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV   K-S
# 0.343351628566932  3000  29.21      29.21      100.00  2706  31.82      31.82      100.00  294  16.64     16.64     100.00         9.80            9.80          9.20  64.84 0.10 15.18
# 0.446493739927339  2675  26.04      55.25       70.79  2291  26.94      58.76       68.18  384  21.73     38.37      83.36        14.36           11.95          5.97  21.48 0.01 20.39
# 0.55362933451312    693   6.75      62.00       44.75   551   6.48      65.24       41.24  142   8.04     46.41      61.63        20.49           12.88          3.88 -21.53 0.00 18.83
# 0.597691136553969   602   5.86      67.86       38.00   460   5.41      70.65       34.76  142   8.04     54.44      53.59        23.59           13.80          3.24 -39.59 0.01 16.21
# 0.608175866850412  3301  32.14     100.00       32.14  2496  29.35     100.00       29.35  805  45.56    100.00      45.56        24.39           17.20          3.10 -43.97 0.07  0.00
                  # 10271 100.00         NA          NA  8504 100.00         NA          NA 1767 100.00        NA         NA        17.20              NA          4.81     NA 0.19 20.39
 

plotcp(arbol.2); printcp(arbol.2)     #2 nodos.
arbol.2.pr <- prune(arbol.2,cp= 0.0028)            
plot(arbol.2.pr, uniform=T, compress=.1, margin=.1); text(arbol.2.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.2.pr)     
print(arbol.2.pr)
report_cat(predict(arbol.2.pr,datos_bi,type='prob')[,2],datos_bi$target)
                 # Total   %Tot %AcumTotal %DesacTotal Bueno %Bueno %AcumBueno %DesacBueno Malo  %Malo %AcumMalo %DesacMalo Prob.Malo(%) ProbAcumMalo(%) Bueno/Maloodd    WOE   IV   K-S
# 0.389902303598982  3000  29.21      29.21      100.00  2706  31.82      31.82      100.00  294  16.64     16.64     100.00         9.80            9.80          9.20  64.84 0.10 15.18
# 0.414151634922737   988   9.62      38.83       70.79   882  10.37      42.19       68.18  106   6.00     22.64      83.36        10.73           10.03          8.32  54.75 0.02 19.55
# 0.472760382089687   756   7.36      46.19       61.17   656   7.71      49.91       57.81  100   5.66     28.30      77.36        13.23           10.54          6.56  30.97 0.01 21.61
# 0.571870273345607   589   5.73      51.92       53.81   480   5.64      55.55       50.09  109   6.17     34.47      71.70        18.51           11.42          4.40  -8.88 0.00 21.09
# 0.59786060741632    342   3.33      55.25       48.08   273   3.21      58.76       44.45   69   3.90     38.37      65.53        20.18           11.95          3.96 -19.59 0.00 20.39
# 0.602529615503651   693   6.75      62.00       44.75   551   6.48      65.24       41.24  142   8.04     46.41      61.63        20.49           12.88          3.88 -21.53 0.00 18.83
# 0.644860813059977   602   5.86      67.86       38.00   460   5.41      70.65       34.76  142   8.04     54.44      53.59        23.59           13.80          3.24 -39.59 0.01 16.21
# 0.654826175696981  3301  32.14     100.00       32.14  2496  29.35     100.00       29.35  805  45.56    100.00      45.56        24.39           17.20          3.10 -43.97 0.07  0.00
                  # 10271 100.00         NA          NA  8504 100.00         NA          NA 1767 100.00        NA         NA        17.20              NA          4.81     NA 0.22 21.61
 




plotcp(arbol.3); printcp(arbol.3)   #3 nodos                
arbol.3.pr <- prune(arbol.3,cp= 0.0029)             #####
plot(arbol.3.pr, uniform=T, compress=.1, margin=.1); text(arbol.3.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.3.pr)       
print(arbol.3.pr)
report_cat(predict(arbol.3.pr,datos_bi,type='prob')[,2],datos_bi$target)

plotcp(arbol.4); printcp(arbol.4) # nodos.
arbol.4.pr <- prune(arbol.4,cp= 0.012)              #####
plot(arbol.4.pr, uniform=T, compress=.1, margin=.1); text(arbol.4.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.4.pr)       
print(arbol.4.pr)

plotcp(arbol.5); printcp(arbol.5)   # nodos.              
arbol.5.pr <- prune(arbol.5,cp=0.0362)              #####
plot(arbol.5.pr, uniform=T, compress=.1, margin=.1); text(arbol.5.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.5.pr)       
print(arbol.5.pr)

plotcp(arbol.6); printcp(arbol.6) # nodos.
arbol.6.pr <- prune(arbol.6,cp=0.0211)              
plot(arbol.6.pr, uniform=T, compress=.1, margin=.1); text(arbol.6.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.6.pr)       
print(arbol.6.pr)

plotcp(arbol.7); printcp(arbol.7)   #  nodos.                
arbol.7.pr <- prune(arbol.7,cp=0.015)              
plot(arbol.7.pr, uniform=T, compress=.1, margin=.1); text(arbol.7.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.7.pr)       
print(arbol.7.pr)

plotcp(arbol.8); printcp(arbol.8)  # nodos.                
arbol.8.pr <- prune(arbol.8,cp=0.0197)            
plot(arbol.8.pr, uniform=T, compress=.1, margin=.1); text(arbol.8.pr, use.n=T,  cex = .8, pretty=T)          
summary(arbol.8.pr)       
print(arbol.8.pr)

############################## Opcion de Palaccini ##########################

datos$nodos1<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_telco_u1m<1) ,1,0)
datos$nodos2<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_telco_u1m>0 & datos$edad>27) ,2,0)
datos$nodos3<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_telco_u1m>0 & datos$edad<28) ,3,0)
datos$nodos4<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas>0) ,4,0)
datos$nodos5<-ifelse((datos$inf_cons_cant_total_sf<3 & datos$inf_mor_sal_abier_gs<100000 ),5,0)
datos$nodos6<-ifelse((datos$inf_cons_cant_total_sf<3 & datos$inf_mor_sal_abier_gs>=100000),6,0)
datos$nodos<-datos$nodos1+datos$nodos2+datos$nodos3+datos$nodos4+datos$nodos5+datos$nodos6
table(datos$nodos)

report_cat(datos$nodos,datos$target)

############################## Opcion de Palaccini - Modificado por Arturo ##########################

datos$ind <- ifelse((datos$edad <= 25 & datos$inf_cons_cant_u3m>0) | (datos$edad>25 & datos$inf_cons_cant_u12m>0 & datos$inf_mor_cant_abiertas>0),1,0)

datos$nodos1<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_telco_u1m<1) ,1,0)
datos$nodos2<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_telco_u1m>0 & datos$edad>27) ,2,0)
datos$nodos3<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas<1 & datos$inf_cons_cant_telco_u1m>0 & datos$edad<28) ,3,0)
datos$nodos4<-ifelse((datos$inf_cons_cant_total_sf>2 & datos$inf_mor_cant_abiertas>0) ,4,0)
datos$nodos5<-ifelse((datos$inf_cons_cant_total_sf<3 & datos$ind==0 ),5,0)
datos$nodos6<-ifelse((datos$inf_cons_cant_total_sf<3 & datos$ind==1),6,0)
datos$nodos<-datos$nodos1+datos$nodos2+datos$nodos3+datos$nodos4+datos$nodos5+datos$nodos6
table(datos$nodos)

report_cat(datos$nodos,datos$target)
